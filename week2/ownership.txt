Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", ref3.to_uppercase());
}
```

s = String::from("goodbye");
if next line not exist, this would be ok. 
When excute assign operation, the old value that referenced would be released,
then ref3 will point to a null value, so this code will not be compiled.


Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
```
This function try to return a referenced type,
when function end, rust will release variable s,
but rust see that we try to expand the lifetime of variable s,
which cause confusion that we don't know when the variable can be released unless the lifetime of it be specied by static.

Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    println!("{}", s2);
}
```
let s2: String = v[0];
Any assignment operation on Vec type is a copy operation, but the String not implement it,
but this code can be accepted by compiler:
let s2: String = v[0].clone()
because v[0].clone() afford a copy of v[0], so this is a brand new value.
